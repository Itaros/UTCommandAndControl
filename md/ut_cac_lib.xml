<?xml version="1.0" encoding="UTF-8"?>
<mdscript xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="UT_CAC_Lib" xsi:noNamespaceSchemaLocation="http://utnas/~unitrader/XRebirthxsds/md.xsd">
  <cues>
    <!--cue name="Cheat_Ship">
      <actions>
        <create_ship name="$ship" macro="macro.units_size_xl_builder_ship_macro" zone="player.zone">
          <owner exact="faction.player"/>
          <safepos x="0m" y="0m" z="-10km" radius="2km"/>
        </create_ship>
        <add_to_player_squad object="$ship"/>
        <find_dock_location name="$dock" container="$ship" multiple="false" />
        <create_platform_actor name="$pilot" dockingbay="$dock.component" type="entitytype.pilot"><owner exact="faction.player"/></create_platform_actor>
        <assign_pilot actor="$pilot" object="$ship"/>
        <create_platform_actor name="$defencemanager" dockingbay="$dock.component" type="entitytype.defencecontrol"><owner exact="faction.player"/></create_platform_actor>
        <assign_defence_manager actor="$defencemanager" object="$ship" />
        <create_platform_actor name="$engineer" dockingbay="$dock.component" type="entitytype.engineer"><owner exact="faction.player"/></create_platform_actor>
        <assign_engineer actor="$engineer" object="$ship"/>
        <create_platform_actor name="$architect" dockingbay="$dock.component" type="entitytype.architect"><owner exact="faction.player"/></create_platform_actor>
        <assign_architect actor="$architect" object="$ship"/>
        <create_platform_actor name="$manager" dockingbay="$dock.component" type="entitytype.manager"><owner exact="faction.player"/></create_platform_actor>
        <create_ship name="$ship" macro="macro.units_size_xl_builder_ship_macro" zone="player.zone">
          <owner exact="faction.player"/>
          <safepos x="0m" y="0m" z="-10km" radius="2km"/>
        </create_ship>
        <add_to_player_squad object="$ship"/>
        <find_dock_location name="$dock" container="$ship" multiple="false" />
        <create_platform_actor name="$pilot" dockingbay="$dock.component" type="entitytype.pilot"><owner exact="faction.player"/></create_platform_actor>
        <assign_pilot actor="$pilot" object="$ship"/>
        <create_platform_actor name="$defencemanager" dockingbay="$dock.component" type="entitytype.defencecontrol"><owner exact="faction.player"/></create_platform_actor>
        <assign_defence_manager actor="$defencemanager" object="$ship" />
        <create_platform_actor name="$engineer" dockingbay="$dock.component" type="entitytype.engineer"><owner exact="faction.player"/></create_platform_actor>
        <assign_engineer actor="$engineer" object="$ship"/>
        <create_platform_actor name="$architect" dockingbay="$dock.component" type="entitytype.architect"><owner exact="faction.player"/></create_platform_actor>
        <assign_architect actor="$architect" object="$ship"/>
        <create_platform_actor name="$manager" dockingbay="$dock.component" type="entitytype.manager"><owner exact="faction.player"/></create_platform_actor>
      </actions>
    </cue-->
    <!-- ##################### End Testing Cheat #########################-->
    <!-- Timer Cue is resetted every full hour, so event_cue_activated is triggered every full hour as signal to grab the Payments -->
    <cue name="Payment_Timer" namespace="this">
      <actions>
        <do_if value="not $payment_sink?">
          <create_cue_actor name="$payment_sink" cue="this"/>
        </do_if>
        <do_else>
          <remove_actor_account actor="$payment_sink"/>
        </do_else>
        <set_actor_account actor="$payment_sink"/>
        <set_value name="$payment_time" exact="(3600 - ((player.age)i % 3600) )s"/>
      </actions>
      <cues>
        <cue name="Payment_Timer_Reset">
          <delay exact="$payment_time"/>
          <actions>
            <reset_cue cue="Payment_Timer"/>
          </actions>
        </cue>
      </cues>
    </cue>
    <library name="Payment">
      <params>
        <param name="actor"/>
      </params>
      <actions>
        <do_if value="not $actor.exists">
          <debug_text filter="error" text="'UT_CAC_Lib.Payment canceled because no valid Actor given'"/>
          <cancel_cue cue="this"/>
        </do_if>
      </actions>
      <cues>
        <cue name="Wage" comment="Wages are paid hourly">
          <conditions>
            <event_cue_completed cue="md.UT_CAC_Lib.Payment_Timer"/>
          </conditions>
          <actions>
            <!-- Wage when Active and inactive are diffrent - $isactive is regulary set by Active Scripts so checking this var confirms that an active script has been running during the last payment period-->
            <do_if value="$actor.$ut_cac_settings.$isactive?">
              <set_value name="$wage" exact="param.ut_cac.wage.{$actor.type}.{1} + ( param.ut_cac.wage.{$actor.type}.{2} * $actor.combinedskill / 100 )"/>
              <remove_value name="$actor.$ut_cac_settings.$isactive"/>
            </do_if>
            <do_else>
              <set_value name="$wage" exact="param.ut_cac.wage.{$actor.type}.{3} + ( param.ut_cac.wage.{$actor.type}.{4} * $actor.combinedskill / 100 )"/>
            </do_else>
            <!-- ToDo: Check if there is enough Money available and do apporiate steps if not (for example reduce skill or stop working for the Player altogether) -->
            <do_if value="$actor.container.commanderentity.exists and $actor.container.commanderentity.hasownaccount and $actor.container.commanderentity.money gt $wage">
              <debug_text filter="general"  text="'%1 %2 %3 just grabbed %4 as Payment from his Commanders Acc, Total Wage so far: %5 combinedskill: %6'.[player.age,$actor.name,$actor.container.name,$wage,$actor.$ut_cac_settings.$experience,$actor.combinedskill]"/>
              <transfer_money from="$actor.container.commanderentity" to="md.UT_CAC_Lib.Payment_Timer.$payment_sink" amount="$wage"/>
            </do_if>
            <do_elseif value="$actor.hasownaccount and $actor.money gt $wage and $actor.type == entitytype.manager">
              <debug_text filter="general"  text="'%1 %2 %3 just grabbed %4 as Payment from his own Acc, Total Wage so far: %5 combinedskill: %6'.[player.age,$actor.name,$actor.container.name,$wage,$actor.$ut_cac_settings.$experience,$actor.combinedskill]"/>
              <transfer_money from="$actor" to="md.UT_CAC_Lib.Payment_Timer.$payment_sink" amount="$wage"/>
            </do_elseif>
            <do_elseif value="player.money gt $wage">
              <debug_text filter="general"  text="'%1 %2 %3 just grabbed %4 as Payment from Player Acc, Total Wage so far: %5 combinedskill: %6'.[player.age,$actor.name,$actor.container.name,$wage,$actor.$ut_cac_settings.$experience,$actor.combinedskill]"/>
              <transfer_money from="player.entity" to="md.UT_CAC_Lib.Payment_Timer.$payment_sink" amount="$wage"/>
            </do_elseif>
            
            <!-- simple EXP gain at certain total Wage Paid - will be changed at some point -->
            <set_value name="$actor.$ut_cac_settings.$experience" operation="add" exact="$wage"/>
            <do_if value="$actor.$ut_cac_settings.$experience gt param.ut_cac.experience.{ ($actor.combinedskill / 20 )i + 1}">
              <do_all exact="$actor.type.skilltypes.count" counter="$i">
                <do_if value="$actor.skill.{$actor.type.skilltypes.{$i}} lt 5">
                  <add_skill entity="$actor" type="$actor.type.skilltypes.{$i}" exact="1"/>
                </do_if>
              </do_all>
              <debug_text filter="general"  text="'%1 %2 %3 just got promoted. new combinedskill: %4'.[player.age,$actor.name,$actor.container.name,$actor.combinedskill]"/>
            </do_if>
            
          </actions>
        </cue>
        <cue name="Riskbonus" comment="Risk Bonus is paid every 10 min while $actor.container is under Attack/in danger">
          <conditions>
            <event_object_attacked object="$actor.container"/>
          </conditions>
          <actions>
            <set_value name="$riskbonus" exact="param.ut_cac.wage.{$actor.type}.{5} + ( param.ut_cac.wage.{$actor.type}.{6} * $actor.combinedskill / 100 )"/>
            <!-- ToDo: Check if there is enough Money available and do apporiate steps if not (for example reduce skill or stop working for the Player altogether) -->
            <!-- ToDo: Check if the Attack is serious by comparing Attack Forces with nearby own Forces - if it is no serious Attack reset this cue without demanding any bonus -->
            <do_if value="$actor.container.commanderentity.exists and $actor.container.commanderentity.hasownaccount and $actor.container.commanderentity.money gt $riskbonus">
              <debug_text filter="general"  text="'%1 %2 %3 just grabbed %4 as Risk Bonus from his Commanders Acc'.[player.age,$actor.name,$actor.container.name,$riskbonus]"/>
              <transfer_money from="$actor.container.commanderentity" to="md.UT_CAC_Lib.Payment_Timer.$payment_sink" amount="$riskbonus"/>
            </do_if>
            <do_elseif value="$actor.hasownaccount and $actor.money gt $riskbonus and $actor.type == entitytype.manager">
              <debug_text filter="general"  text="'%1 %2 %3 just grabbed %4 as Risk Bonus from his own Acc'.[player.age,$actor.name,$actor.container.name,$riskbonus]"/>
              <transfer_money from="$actor" to="md.UT_CAC_Lib.Payment_Timer.$payment_sink" amount="$riskbonus"/>
            </do_elseif>
            <do_elseif value="player.money gt $riskbonus">
              <debug_text filter="general"  text="'%1 %2 %3 just grabbed %4 as Risk Bonus from Player Acc'.[player.age,$actor.name,$actor.container.name,$riskbonus]"/>
              <transfer_money from="player.entity" to="md.UT_CAC_Lib.Payment_Timer.$payment_sink" amount="$riskbonus"/>
            </do_elseif>
          </actions>
          <cues>
            <cue name="Riskbonus_reset">
              <delay exact="10min"/>
              <actions>
                <reset_cue cue="Riskbonus"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </library>
    <library name="Account_Manager">
      <params>
        <param name="actor"/>
      </params>
      <conditions>
        <event_object_money_updated object="$actor"/>
      </conditions>
      <actions>
        <!-- say a few words about the received/sent money in case the player is nearby (interaction with someone else, not the player) -->
        <do_if value="$actor.room == player.room" >
          <do_if value="event.param lt actor.money">
            <speak actor="$actor" line="[1165,4107,4770].random" comment="Deal closed. I'm sending you a report now.|All set and done.|Confirmed, beginning transfer."/>
          </do_if>
          <do_else>
            <speak actor="$actor" line="[1165,30474107,4770].random" comment="Deal closed. I'm sending you a report now.|I'm transferring the credits to you now.|All set and done.|Confirmed, beginning transfer."/>
          </do_else>
        </do_if>
      </actions>
      <cues>
        <cue name="Transfer_Surplus">
          <delay exact="1min"/>
          <actions>
            <do_if value="$actor.minbudget lt $actor.money lt $actor.maxbudget and $actor.maxbudget != 0Cr and $actor.minbudget != 0Cr" comment="do-nothing-case (most common) - skip other checks"/>
            <!-- Actor has less Money than he is set up - just grab some from the Player 
            ToDo: Add actual questioning for additional Funds
            ToDo: Add Requesting Money from Commanderentity instead of Player if possible -->
            <do_elseif value="$actor.money lt $actor.minbudget">
              <debug_text filter="general" chance="$actor.$debug * 100" text="'%1 %2 %3 Grabbing %4 Credits from Player to keep working'.[player.age,$actor.name,$actor.container.name,($actor.minbudget)Cr]"/>
              <transfer_money from="player.entity" to="$actor" amount="$actor.minbudget"/>
            </do_elseif>
            <!-- Actor has more Money than he needs - transfer the rest to the Player (round transfered amount up to a nice, round number) 
            ToDo: Send Money to Commanderentity instead of player if possible -->
            <do_elseif value="$actor.money gt $actor.maxbudget">
              <set_value name="$transferamount" exact="$actor.money - $actor.maxbudget"/>
              <do_if value="$transferamount lt 1000Cr" comment="do-nothing-case - too less money to care">
                <set_value name="$transferamount" exact="0"/>
              </do_if>
              <!-- round up to the next 1.000, 10.000, 100.000 etc. - depends on maxbudget and transfer amount-->
              <do_elseif value="$transferamount lt 10000Cr or $actor.maxbudget lt 100000Cr">
                <set_value name="$transferamount" exact="$transferamount + ( 1000Cr - ($transferamount % 1000Cr) )"/>
              </do_elseif>
              <do_elseif value="$transferamount lt 100000Cr or $actor.maxbudget lt 1000000Cr">
                <set_value name="$transferamount" exact="$transferamount + ( 10000Cr - ($transferamount % 10000Cr) )"/>
              </do_elseif>
              <do_elseif value="$transferamount lt 1000000Cr or $actor.maxbudget lt 10000000Cr">
                <set_value name="$transferamount" exact="$transferamount + ( 100000Cr - ($transferamount % 100000Cr) )"/>
              </do_elseif>
              <do_elseif value="$transferamount lt 10000000Cr or $actor.maxbudget lt 100000000Cr">
                <set_value name="$transferamount" exact="$transferamount + ( 1000000Cr - ($transferamount % 1000000Cr) )"/>
              </do_elseif>
              <do_elseif value="$transferamount lt 100000000Cr or $actor.maxbudget lt 1000000000Cr">
                <set_value name="$transferamount" exact="$transferamount + ( 10000000Cr - ($transferamount % 10000000Cr) )"/>
              </do_elseif>
              <do_elseif value="$transferamount lt 1000000000Cr or $actor.maxbudget lt 10000000000Cr">
                <set_value name="$transferamount" exact="$transferamount + ( 100000000Cr - ($transferamount % 100000000Cr) )"/>
              </do_elseif>
              <do_else>
                <set_value name="$transferamount" exact="$transferamount + ( 1000000000Cr - ($transferamount % 1000000000Cr) )"/>
              </do_else>
              <do_if value="$transferamount != 0">
                <debug_text filter="general" chance="$actor.$debug * 100" text="'%1 %2 %3 Transferring %4 Credits to Player'.[player.age,$actor.name,$actor.container.name,$transferamount/100]"/>
                <transfer_money amount="$transferamount" from="$actor" to="player.entity"/>
              </do_if>
            </do_elseif>
            <reset_cue cue="Account_Manager"/>
          </actions>
        </cue>
      </cues>
    </library>
    <library name="Actor_Init">
      <actions>
        <!-- set up Variables -->
        <set_value name="$actor.$debug" exact="false" chance="(not $actor.$debug?)*100" comment="default value if not already set"/>
        <do_if value="not $actor.$ut_cac_settings?">
          <set_value name="$actor.$ut_cac_settings" exact="param.ut_cac.setting_defaults.clone"/>
        </do_if>
        <do_else>
          <do_if value="not $actor.$ut_cac_settings.$pesterlevel?">
            <set_value name="$actor.$ut_cac_settings.$pesterlevel" exact="param.ut_cac.setting_defaults.$pesterlevel"/>
          </do_if>
          <do_if value="not $actor.$ut_cac_settings.$loglevel?">
            <set_value name="$actor.$ut_cac_settings.$loglevel" exact="param.ut_cac.setting_defaults.$loglevel"/>
          </do_if>
          <do_if value="not $actor.$ut_cac_settings.$legality?">
            <set_value name="$actor.$ut_cac_settings.$legality" exact="param.ut_cac.setting_defaults.$legality"/>
          </do_if>
          <do_if value="not $actor.$ut_cac_settings.$jumptype?">
            <set_value name="$actor.$ut_cac_settings.$jumptype" exact="param.ut_cac.setting_defaults.$jumptype"/>
          </do_if>
          <do_if value="not $actor.$ut_cac_settings.$insectorjump?">
            <set_value name="$actor.$ut_cac_settings.$insectorjump" exact="param.ut_cac.setting_defaults.$insectorjump"/>
          </do_if>
          <do_if value="not $actor.$ut_cac_settings.$currenttrade?">
            <set_value name="$actor.$ut_cac_settings.$currenttrade" exact="param.ut_cac.setting_defaults.$currenttrade"/>
          </do_if>
        </do_else>
        <!-- for simple EXP gain at certain total Wages paid - will be changed at some point -->
        <do_if value="not $actor.$ut_cac_settings.$experience?">
          <do_if value="$actor.combinedskill lt 20">
            <set_value name="$actor.$ut_cac_settings.$experience" exact="0Cr"/>
          </do_if>
          <do_else>
            <set_value name="$actor.$ut_cac_settings.$experience" exact="param.ut_cac.experience.{ ($actor.combinedskill / 20 )i }"/>
          </do_else>
          <!--set_value name="$actor.$ut_cac_settings.$experience" exact="table[]"/>
          <set_value name="$actor.$ut_cac_settings.$experience.{skilltype.boarding}" exact="if $actor.skill.boarding then param.ut_cac.experience.{$actor.skill.boarding} else 0"/>
          <set_value name="$actor.$ut_cac_settings.$experience.{skilltype.combat}" exact="if $actor.skill.combat then param.ut_cac.experience.{$actor.skill.combat} else 0"/>
          <set_value name="$actor.$ut_cac_settings.$experience.{skilltype.engineering}" exact="if $actor.skill.engineering then param.ut_cac.experience.{$actor.skill.engineering} else 0"/>
          <set_value name="$actor.$ut_cac_settings.$experience.{skilltype.leadership}" exact="if $actor.skill.leadership then param.ut_cac.experience.{$actor.skill.leadership} else 0"/>
          <set_value name="$actor.$ut_cac_settings.$experience.{skilltype.management}" exact="if $actor.skill.management then param.ut_cac.experience.{$actor.skill.management} else 0"/>
          <set_value name="$actor.$ut_cac_settings.$experience.{skilltype.morale}" exact="if $actor.skill.morale then param.ut_cac.experience.{$actor.skill.morale} else 0"/>
          <set_value name="$actor.$ut_cac_settings.$experience.{skilltype.navigation}" exact="if $actor.skill.navigation then param.ut_cac.experience.{$actor.skill.navigation} else 0"/>
          <set_value name="$actor.$ut_cac_settings.$experience.{skilltype.science}" exact="if $actor.skill.science then param.ut_cac.experience.{$actor.skill.science} else 0"/-->
        </do_if>
      </actions>
    </library>
    <!--
Dialogue Tree - rough concept (for all Entity Types)
1. Direct Orders (Entity Specific, but Managment is in this Script)(Displays all current Orders as first Menu, second Menu is what you can do with each Order, 1 is for the first/current Order which is a bis special, * is any other Order
1.1.1 Insert Order / Finish current Order later
1.1.2 Replace Order / Cancel current Order
1.1.3 Move Order / Finish it later
1.1.4 Cancel ALL Orders
1.1.5 Cancel Order
1.1.6 (back) - better get used to [Esc] though
1.*.1 Insert Order
1.*.2 Replace Order
1.*.3 Move Order
1.*.4 Cancel All Orders except the current one (number 1)
1.*.5 Cancel Order
1.*.6 (back) - better get used to [Esc] though
Which Orders are available depends on entity Type
- - - - - -
2. Settings Managment - Entity Specific
- - - - - -
3. Connect to other People   - Maybe also include an Option to connect to Subordinates with no consistent Position (move around as necesary)
      -> note that Station and CV are counted as the same in this Menu
3.1 Defense
3.2 Engineer
3.3 Architect
3.4 Superior
3.5 Captain/Pilot/Manager
3.6 Subordinates
- - - - - - -
4. Subordinates Handling
4.1 Take all my direct Subordinates
4.2 Take all Subordinates of ***
4.3
4.4
4.5
4.6
- - - - - - - -
5. Personal Managment
5.1 Show Skills
5.2 Show Finances (Actor account, Account Owner, Wages and Bonusses) -> also Options for Money Transfer, Account Sharing (and seperation)
5.3 Transfer Entity (not just from/to Skunk, but also tangential as long as its InZone)
5.4 Pester Level (how important should something be before pestering the Player - note that this also depends on the Player Situation) - PLANNED Feature
5.5 Playerlog Level
5.6 Logfile Level (write Logfile info also to Playerlog)
5.6 Go back
- - - - - - - -
6. Debug Functions
6.1 Restart Main Script
6.2 Print all Script Values
6.3 Toggle Entity Logfile Debugging (writes to same file as Logfile, but diffrent, more detailed Info)
6.4 Destroy Object for Cleanup
6.5 Destroy Actor for Cleanup
6.6 make Actor a 5-Start-Employee
-->
    <library name="Comm_Common_Personal" instantiate="true">
      <!-- common Handler for all NPC Types (Hired) - general Options for Personal Managment  -->
      <params>
        <param name="actor"/>
      </params>
      <conditions>
        <check_any>
          <event_conversation_next_section sectionprefix="comm_personal_" actor="$actor"/>
          <event_conversation_returned_to_section sectionprefix="comm_personal_" actor="$actor"/>
          <event_cue_signalled/>
        </check_any>
      </conditions>
      <actions>
        <debug_text filter="general" chance="$actor.$debug * 100" text="'%1 %2 %3:\nevent.param= %4 event.param2= %5 event.param3= %6'.[player.age,$actor.name,event.name,event.param,event.param2,event.param3]"/>
        <!--- ################################### -->
        <!--                       Personal Menu                          -->
        <!--- ################################### -->
        <do_if value="event.param == 'comm_personal_main'">
          <do_if value="event.name == 'event_conversation_next_section'">
            <add_npc_line speaker="player.entity" line="[1400,1401,1402].random" hidechoices="false" comment="lets talk about this in detail" />
            <add_npc_line speaker="$actor" line="[4110,4111].random" hidechoices="false" comment="Here you go." />
          </do_if>
          <do_elseif value="event.name == 'event_conversation_returned_to_section'">
            <do_if value="event.param2 == 'no change'">
              <add_npc_line speaker="player.entity" line="[1220,1410,1612,1713,1714].random" hidechoices="false" comment="No, I changed my mind.|Never mind that, do what you want.|Never mind that, do what you want.|Never mind that.|Well, maybe some other time." />
            </do_if>
            <add_npc_line speaker="$actor" line="[1012,1013,1018,1019].random" hidechoices="false" comment="generic confirmation" />
          </do_elseif>
          <add_player_choice_sub text="'About your verbosity...'" position="1" section="comm_personal_pester" selectable="false" confidence="$actor.$ut_cac_settings.$pesterlevel / 20" />
          <add_player_choice_sub text="'About your Log Activity...'" position="2" section="comm_personal_log" selectable="false" confidence="$actor.$ut_cac_settings.$loglevel / 20" />
          <add_player_choice_sub text="'About your workplace..'" position="3" section="comm_personal_transfer" selectable="false" comment="planned, but not necesary yet" />
          <add_player_choice_sub text="'Show me your Skills, please!'" position="4" section="comm_personal_skills" confidence="$actor.combinedskill / 20" />
          <do_if value="$actor.type != entitytype.commander or $actor.type != entitytype.pilot">
            <add_player_choice_sub text="{10004,1611}" position="5" section="comm_personal_money" confidence="3" selectable="$actor.hasownaccount" comment="planned function for confidence: show if the Actor has not enough or too much money (optimum is 3)"/>
          </do_if>
          <do_else>
            <add_player_choice text="'Money: %1Cr'.[if $actor.hasownaccount then ($actor.money)Cr else 'No Account']" position="5" section="comm_personal_money" selectable="false" comment="Not Selectable because Pilots/Commanders only have the Money which is reserved for a Job."/>
          </do_else>
          <add_player_choice_return text="'(Back)'" position="6" />
          <add_player_choice_return text="'(Back)'" position="close" />
        </do_if>
        <!-- ##### Slot1: Skills #### -->
        <do_elseif value="event.param == 'comm_personal_skills'">
          <add_npc_line speaker="player.entity" line="[1130,1110].random" hidechoices="false" comment="Show me your profile/skills, please." />
          <add_npc_line speaker="$actor" line="[4110,4111,1582,1583].random" hidechoices="false" comment="Here you go. | Take a look, I'm more than qualified. | I hope these impress you, I'm quite proud." />
          <open_conversation_menu menu="CharProfileMenu" param="[0, 0, $actor, 0, 1, $actor.container]" />
        </do_elseif>
        <!-- #### Slot2: Money Sub-Menu #### -->
        <do_elseif value="event.param == 'comm_personal_money'">
          <do_if value="event.name == 'event_conversation_next_section'">
            <add_npc_line speaker="player.entity" line="[1611].random" hidechoices="false" comment="About your budget..." />
            <add_npc_line speaker="$actor" line="[4110,4111].random" hidechoices="false" comment="Here you go." />
          </do_if>
          <do_elseif value="event.name == 'event_conversation_returned_to_section'">
            <add_npc_line speaker="player.entity" line="[1613].random" hidechoices="false" comment="Confirming budget changes." />
            <add_npc_line speaker="$actor" line="[1012,1013,1018,1019].random" hidechoices="false" comment="Here you go." />
          </do_elseif>
          <add_player_choice_sub text="'Account Minimum: %1Cr'.[($actor.minbudget)Cr]" position="1" section="comm_personal_money_minbudget" selectable="false"/>
          <add_player_choice_sub text="'%1Cr :Account Maximum'.[($actor.maxbudget)Cr]" position="4" section="comm_personal_money_maxbudget" selectable="false"/>
          <add_player_choice_sub text="'Current Account: %1Cr'.[($actor.money)Cr]" position="2" section="comm_personal_money_transfer"/>
          <add_player_choice_sub text="'%1Cr :Give wanted Money plus 25%2'.[($actor.container.wantedmoney)Cr,'%']" position="5" section="comm_personal_money_wanted"/>
          <add_player_choice_sub text="'Share Account with...'" position="3" section="comm_personal_money_shareaccount" selectable="false"/>
          <add_player_choice_return text="'(Back)'" position="6" returnparam="'no change'" />
          <add_player_choice_return text="'(Back)'" position="close" returnparam="'no change'" />
        </do_elseif>
        <do_elseif value="event.param == 'comm_personal_money_minbudget'">
          <add_npc_line speaker="player.entity" line="[1400,1401,1402].random" hidechoices="false" comment="lets talk about this in detail" />
          <add_npc_line speaker="$actor" line="[1008].random" hidechoices="false" comment="Yes? What do you want us to do?" />
          <open_conversation_menu menu="SetMoneyLimitMenu" param="[0, 0, $actor, 'min']" />
        </do_elseif>
        <do_elseif value="event.param == 'comm_personal_money_maxbudget'">
          <add_npc_line speaker="player.entity" line="[1400,1401,1402].random" hidechoices="false" comment="lets talk about this in detail" />
          <add_npc_line speaker="$actor" line="[1008].random" hidechoices="false" comment="Yes? What do you want us to do?" />
          <open_conversation_menu menu="SetMoneyLimitMenu" param="[0, 0, $actor, 'max']" />
        </do_elseif>
        <do_elseif value="event.param == 'comm_personal_money_transfer'">
          <add_npc_line speaker="player.entity" line="[1400,1401,1402].random" hidechoices="false" comment="lets talk about this in detail" />
          <add_npc_line speaker="$actor" line="[1008].random" hidechoices="false" comment="Yes? What do you want us to do?" />
          <open_conversation_menu menu="MoneyTransferMenu" param="[0, 0, $actor]" />
        </do_elseif>
        <do_elseif value="event.param == 'comm_personal_money_wanted'">
          <!-- set budgets to a fitting range to avoid back-transfers -->
          <do_if value="$actor.container.wantedmoney gt $actor.maxbudget">
            <set_actor_max_budget actor="$actor" amount="$actor.container.wantedmoney * 2"/>
          </do_if>
          <do_if value="$actor.container.wantedmoney/3 lt $actor.minbudget">
            <set_actor_min_budget actor="$actor" amount="$actor.container.wantedmoney / 10"/>
          </do_if>
          <transfer_money from="player.entity" to="$actor" amount="( $actor.container.wantedmoney * 1.25 ) - $actor.money"/>
          <do_if value="$actor.container.wantedmoney lt $actor.money" comment="Player has not enough Money - modify dialogue to indicate this">
            <add_npc_line speaker="player.entity" line="[1511,1613,1717,1732].random" hidechoices="false" comment="Ka-Ching! | Confirming budget changes. | Deal. | Begin and let me know if you encounter any problems." />
            <add_npc_line speaker="$actor" line="[1119,4803].random" hidechoices="false" comment="The current funding is insufficient sir. | Please get back to me to discuss my budget as soon as you can." />
          </do_if>
          <do_else>
            <add_npc_line speaker="player.entity" line="[1511,1613,1717,1732].random" hidechoices="false" comment="Ka-Ching! | Confirming budget changes. | Deal. | Begin and let me know if you encounter any problems." />
            <add_npc_line speaker="$actor" line="[1012,1013,1018,1019,1120,4804].random" hidechoices="false" comment="generic confirmation | Affirmative, funding is looking good. All green. | Confirming budget changes." />
          </do_else>
          <set_value name="$return"/>
        </do_elseif>
        <!-- #### Slot3: Reassignment (to antarctica :P ) #### -->
        <do_elseif value="event.param == 'comm_personal_transfer'">
          <!-- ToDo: Spoken Text -->
          <do_if value="player.entity.container != $actor.container">
            <add_player_choice text="'Work here'" position="1" section="comm_personal_transfer_selected" choiceparam="player.entity.room"/>
          </do_if>
          <do_elseif value="$actor.container != player.primaryship">
            <add_player_choice text="'Come on board of the %1'.[player.primaryship.name]" position="1" section="comm_personal_transfer_selected" choiceparam="player.primaryship"/>
          </do_elseif>
          <add_player_choice text="'Work somewhere else'" position="2" section="comm_personal_transfer_selectobject"/>
          <add_player_choice text="'You\'re fired'" position="3" section="comm_personal_transfer_fired"/>
          <add_player_choice text="'Suspend your Work/Start working'" position="4" section="comm_transfer_suspend"/>
          <add_player_choice_return text="'(Back)'" position="6" />
        </do_elseif>
        <do_elseif value="event.param == 'comm_personal_transfer_selected'">
          <!-- check if target is maybe docked at the actor location or the other way around and just warp him directly in this case -->
          <!-- also do cleanup here and and once the actor has reached his destination start the default scripts -->
          <start_actor_transport actor="$actor" target="event.param"/>
        </do_elseif>
        <do_elseif value="event.param == 'comm_personal_transfer_fired'">
          <!-- Kill Job Script, remove assignments like Pilot, controlentity etc., kill payment cue, pay firing penalty, remove actor in a safe manner -->
        </do_elseif>
        <do_elseif value="event.param == 'comm_personal_transfer_suspend'">
          <!-- Kill Job Script, remove assignments like Pilot, controlentity etc., set payment roll to reduced value, set value that Actor is suspended and stay at current location -->
        </do_elseif>
        <!-- #### Slot4: Pester Level Settings #### -->
        <do_elseif value="event.param == 'comm_personal_pester'">
          <!-- ToDo: more indicative feedback for the Player about the current Pester Level (atm its simply the greyed out one) -->
          <do_if value="typeof event.param2 != datatype.null">
            <set_value name="$actor.$ut_cac_settings.$pesterlevel" exact="(event.param2)i"/>
          </do_if>
          <do_if value="event.name == 'event_conversation_next_section'">
            <add_npc_line speaker="player.entity" line="[1400,1401,1402].random" hidechoices="false" comment="lets talk about this in detail" />
            <add_npc_line speaker="$actor" line="[4110,4111].random" hidechoices="false" comment="Here you go." />
          </do_if>
          <!--  (maybe replace this with a Slider?) -->
          <add_player_choice text="'dont. say. anything. ever.'" position="1" section="comm_personal_pester" choiceparam="0" confidence="0" selectable="$actor.$ut_cac_settings.$pesterlevel != 0" />
          <add_player_choice text="'Ask me only in case of emergency'" position="2" section="comm_personal_pester" choiceparam="20" confidence="1" selectable="$actor.$ut_cac_settings.$pesterlevel != 20" />
          <add_player_choice text="'Ask me only for the important Stuff'" position="3" section="comm_personal_pester" choiceparam="40" confidence="2" selectable="$actor.$ut_cac_settings.$pesterlevel != 40" />
          <add_player_choice text="'Call me in case of doubt.'" position="4" section="comm_personal_pester" choiceparam="60" confidence="3" selectable="$actor.$ut_cac_settings.$pesterlevel != 60" />
          <add_player_choice text="'Call me in case of even trivial questions'" position="5" section="comm_personal_pester" choiceparam="80" confidence="4" selectable="$actor.$ut_cac_settings.$pesterlevel != 80" />
          <add_player_choice text="'Contact me for absolutely everything!'" position="6" section="comm_personal_pester" choiceparam="100" confidence="5" selectable="$actor.$ut_cac_settings.$pesterlevel != 100" />
          <add_player_choice_return text="'(Back)'" position="close" returnparam="'no change'" />
        </do_elseif>
        <!-- #### Slot5: Log Level Settings #### -->
        <do_elseif value="event.param == 'comm_personal_log'">
          <!-- ToDo: more indicative feedback for the Player about the current Log Level (atm its simply the greyed out one) -->
          <do_if value="typeof event.param2 != datatype.null">
            <set_value name="$actor.$ut_cac_settings.$loglevel" exact="(event.param2)i"/>
          </do_if>
          <do_if value="event.name == 'event_conversation_next_section'">
            <add_npc_line speaker="player.entity" line="[1400,1401,1402].random" hidechoices="false" comment="lets talk about this in detail" />
            <add_npc_line speaker="$actor" line="[4110,4111].random" hidechoices="false" comment="Here you go." />
          </do_if>
          <!--  (maybe replace this with a Slider?) -->
          <add_player_choice text="'dont. log. anything. ever.'" position="1" section="comm_personal_log" choiceparam="0" confidence="0" selectable="$actor.$ut_cac_settings.$loglevel != 0" />
          <add_player_choice text="'Write down only the really important stuff'" position="2" section="comm_personal_log" choiceparam="20" confidence="1" selectable="$actor.$ut_cac_settings.$loglevel != 20" />
          <add_player_choice text="'Just Log important stuff'" position="3" section="comm_personal_log" choiceparam="40" confidence="2" selectable="$actor.$ut_cac_settings.$loglevel != 40" />
          <add_player_choice text="'Write a usual Log file'" position="4" section="comm_personal_log" choiceparam="60" confidence="3" selectable="$actor.$ut_cac_settings.$loglevel != 60" />
          <add_player_choice text="'Write something when something happens'" position="5" section="comm_personal_log" choiceparam="80" confidence="4" selectable="$actor.$ut_cac_settings.$loglevel != 80" />
          <add_player_choice text="'Log absolutely everything!'" position="6" section="comm_personal_log" choiceparam="100" confidence="5" selectable="$actor.$ut_cac_settings.$loglevel != 100" />
          <add_player_choice_return text="'(Back)'" position="close" returnparam="'no change'" />
        </do_elseif>
        
        <!-- return to Previous Menu Point (no direct return function in Vanilla - abusing a full menu of Returns for this) -->
        <do_if value="$return?">
          <remove_value name="$return"/>
          <add_player_choice_return text="'Just Ignore this'" position="1" immediate="true"/>
          <add_player_choice_return text="'and select any Item'" position="4" immediate="true"/>
          <add_player_choice_return text="'This is just a Workaround'" position="2" immediate="true"/>
          <add_player_choice_return text="'for a missing Script function'" position="5" immediate="true"/>
          <add_player_choice_return text="'to go back one Menu Level'" position="3" immediate="true"/>
          <add_player_choice_return text="'without selection'" position="6" immediate="true"/>
          <add_player_choice_return text="'(Back)'" position="close" immediate="true"/>
        </do_if>
      </actions>
    </library>
    <library name="Comm_Common_Connect" instantiate="true">
      <!-- common Handler for all NPC Types (Hired) - General Options to connect to other People -->
      <params>
        <param name="actor"/>
      </params>
      <conditions>
        <check_any>
          <event_conversation_next_section sectionprefix="comm_connect_" actor="$actor"/>
          <event_conversation_returned_to_section sectionprefix="comm_connect_" actor="$actor"/>
          <event_cue_signalled/>
        </check_any>
      </conditions>
      <actions>
        <debug_text filter="general" chance="$actor.$debug * 100" text="'%1 %2 %3:\nevent.param= %4 event.param2= %5 event.param3= %6'.[player.age,$actor.name,event.name,event.param,event.param2,event.param3]"/>
        <!--- ################################### -->
        <!--                        Connect Menu                          -->
        <!--- ################################### -->
        <do_if value="event.param == 'comm_connect_main'">
          <add_npc_line speaker="player.entity" line="[102081].random" hidechoices="false" comment="Just put him through." />
          <add_npc_line speaker="$actor" line="[1012,1013,1018,1019].random" hidechoices="false" comment="generic confirmation" />
          <!-- Slot1: Defense Officer -->
          <do_if value="$actor.container.defencenpc.exists">
            <add_player_choice_subconv text="'Defence: %s'.[$actor.container.defencenpc.name]" position="1" conversation="default"  actor="$actor.container.defencenpc" selectable="$actor.container.defencenpc != $actor"/>
          </do_if>
          <do_elseif value="$actor.container.buildingmodule.container.defencenpc.exists">
            <add_player_choice_subconv text="'Defence: %s'.[$actor.container.buildingmodule.container.defencenpc.name]" position="1" conversation="default"  actor="$actor.container.buildingmodule.container.defencenpc" selectable="$actor.container.buildingmodule.container.defencenpc != $actor"/>
          </do_elseif>
          <do_elseif value="$actor.container.buildmodule.buildanchor.defencenpc.exists">
            <add_player_choice_subconv text="'Defence: %s'.[$actor.container.buildmodule.buildanchor.defencenpc.name]" position="1" conversation="default"  actor="$actor.container.buildmodule.buildanchor.defencenpc" selectable="$actor.container.buildmodule.buildanchor.defencenpc != $actor"/>
          </do_elseif>
          <!-- Slot2: Engineer -->
          <do_if value="$actor.container.engineer.exists">
            <add_player_choice_subconv text="'Engineer: %s'.[$actor.container.engineer.name]" position="2" conversation="default"  actor="$actor.container.engineer" selectable="$actor.container.engineer != $actor"/>
          </do_if>
          <do_elseif value="$actor.container.buildingmodule.container.engineer.exists">
            <add_player_choice_subconv text="'Engineer: %s'.[$actor.container.buildingmodule.container.engineer.name]" position="2" conversation="default"  actor="$actor.container.buildingmodule.container.engineer" selectable="$actor.container.buildingmodule.container.engineer != $actor"/>
          </do_elseif>
          <do_elseif value="$actor.container.buildmodule.buildanchor.engineer.exists">
            <add_player_choice_subconv text="'Engineer: %s'.[$actor.container.buildmodule.buildanchor.engineer.name]" position="2" conversation="default"  actor="$actor.container.buildmodule.buildanchor.engineer" selectable="$actor.container.buildmodule.buildanchor.engineer != $actor"/>
          </do_elseif>
          <!-- Slot3: Architect -->
          <do_if value="$actor.container.architect.exists">
            <add_player_choice_subconv text="'Architect: %s'.[$actor.container.architect.name]" position="3" conversation="default"  actor="$actor.container.architect" selectable="$actor.container.architect != $actor"/>
          </do_if>
          <do_elseif value="$actor.container.buildingmodule.container.architect.exists">
            <add_player_choice_subconv text="'Architect: %s'.[$actor.container.buildingmodule.container.architect.name]" position="3" conversation="default"  actor="$actor.container.buildingmodule.container.architect" selectable="$actor.container.buildingmodule.container.architect != $actor"/>
          </do_elseif>
          <do_elseif value="$actor.container.buildmodule.buildanchor.architect.exists">
            <add_player_choice_subconv text="'Architect: %s'.[$actor.container.buildmodule.buildanchor.architect.name]" position="3" conversation="default"  actor="$actor.container.buildmodule.buildanchor.architect" selectable="$actor.container.buildmodule.buildanchor.architect != $actor"/>
          </do_elseif>
          <!-- Slot4: Superior -->
          <do_if value="$actor.container.commanderentity.exists">
            <add_player_choice_subconv text="'Superior: %s'.[$actor.container.commanderentity.name]" position="4" conversation="default"  actor="$actor.container.commanderentity" selectable="$actor.container.commanderentity != $actor"/>
          </do_if>
          <do_elseif value="$actor.container.buildingmodule.container.architect.exists">
            <add_player_choice_subconv text="'Superior: %s'.[$actor.container.buildingmodule.container.commanderentity.name]" position="4" conversation="default"  actor="$actor.container.buildingmodule.container.commanderentity" selectable="$actor.container.buildingmodule.container.commanderentity != $actor"/>
          </do_elseif>
          <do_elseif value="$actor.container.buildmodule.buildanchor.architect.exists">
            <add_player_choice_subconv text="'Superior: %s'.[$actor.container.buildmodule.buildanchor.commanderentity.name]" position="4" conversation="default"  actor="$actor.container.buildmodule.buildanchor.commanderentity" selectable="$actor.container.buildmodule.buildanchor.commanderentity != $actor"/>
          </do_elseif>
          <do_if value="$actor.container.pilot.exists">
            <add_player_choice_subconv text="'Captain: %s'.[$actor.container.pilot.name]" position="5" conversation="default"  actor="$actor.container.pilot" selectable="$actor.container.pilot != $actor"/>
          </do_if>
          <!-- Slot5: Pilot/Captain/Manager -->
          <do_elseif value="$actor.container.tradenpc.exists">
            <add_player_choice_subconv text="'Manager: %s'.[$actor.container.tradenpc.name]" position="5" conversation="default"  actor="$actor.container.tradenpc" selectable="$actor.container.tradenpc != $actor"/>
          </do_elseif>
          <do_elseif value="$actor.container.buildingmodule.container.pilot.exists">
            <add_player_choice_subconv text="'Captain: %s'.[$actor.container.buildingmodule.container.pilot.name]" position="5" conversation="default"  actor="$actor.container.buildingmodule.container.pilot" selectable="$actor.container.buildingmodule.container.pilot != $actor"/>
          </do_elseif>
          <do_elseif value="$actor.container.buildingmodule.container.tradenpc.exists">
            <add_player_choice_subconv text="'Manager: %s'.[$actor.container.buildingmodule.container.tradenpc.name]" position="5" conversation="default"  actor="$actor.container.buildingmodule.container.tradenpc" selectable="$actor.container.buildingmodule.container.tradenpc != $actor"/>
          </do_elseif>
          <do_elseif value="$actor.container.buildmodule.buildanchor.pilot.exists">
            <add_player_choice_subconv text="'Captain: %s'.[$actor.container.buildmodule.buildanchor.pilot.name]" position="5" conversation="default"  actor="$actor.container.buildmodule.buildanchor.pilot" selectable="$actor.container.buildmodule.buildanchor.pilot != $actor"/>
          </do_elseif>
          <do_elseif value="$actor.container.buildmodule.buildanchor.tradenpc.exists">
            <add_player_choice_subconv text="'Manager: %s'.[$actor.container.buildmodule.buildanchor.tradenpc.name]" position="5" conversation="default"  actor="$actor.container.buildmodule.buildanchor.tradenpc" selectable="$actor.container.buildmodule.buildanchor.tradenpc != $actor"/>
          </do_elseif>
          <!-- Slot6: Subordinates -->
          <add_player_choice_sub text="'Subordinates: %s'.[$actor.container.subordinates.{$actor.type}.count]" position="6" section="comm_connect_subordinates" selectable="$actor.container.subordinates.{$actor.type}.count" confidence="[$actor.container.subordinates.{$actor.type}.count - 1,5].min"/>
          <add_player_choice_return text="'(Back)'" position="close" />
        </do_if>
        <do_elseif value="event.param == 'comm_connect_subordinates'">
          <do_all exact="[$actor.container.subordinates.{$actor.type}.count,6].min" counter="$i">
            <do_if value="$actor.container.subordinates.{$actor.type}.{$i}.isclass.station">
              <do_if value="$actor.container.subordinates.{$actor.type}.{$i}.tradenpc.exists">
                <add_player_choice_subconv text="'Manager: %s'.[$actor.container.subordinates.{$actor.type}.{$i}.tradenpc.name]" position="$i" conversation="default"  actor="$actor.container.subordinates.{$actor.type}.{$i}.tradenpc"/>
              </do_if>
            </do_if>
            <do_elseif value="$actor.container.subordinates.{$actor.type}.{$i}.isclass.ship">
              <do_if value="$actor.container.subordinates.{$actor.type}.{$i}.pilot.exists">
                <add_player_choice_subconv text="'Captain: %s'.[$actor.container.subordinates.{$actor.type}.{$i}.pilot.name]" position="$i" conversation="default"  actor="$actor.container.subordinates.{$actor.type}.{$i}.pilot"/>
              </do_if>
            </do_elseif>
          </do_all>
          <add_player_choice_return text="'(Back)'" position="6" returnparam="'no change'" />
          <add_player_choice_return text="'(Back)'" position="close" returnparam="'no change'" />
        </do_elseif>
        <!-- ToDo: Use this Snippet once again to make a new Conversation which doesnt return to the old one on cmpletion -->
        <do_elseif value="event.param == 'comm_connect_selected'">
          <!-- CHOICE SNIPPET (Example)-->
          <add_player_choice text="'Captain: %s'.[$actor.container.subordinates.{$actor.type}.{$i}.pilot.name]" position="$i" section="comm_connect_selected" choiceparam="$actor.container.subordinates.{$actor.type}.{$i}.pilot" selectable="$actor.container.subordinates.{$actor.type}.{$i}.pilot != $actor"/>
          <!-- /CHOICE SNIPPET -->
          <!-- Cancel this Conversation and start a new one with the desired Person -->
          <do_if value="$actor.room != player.entity.room" >
            <add_npc_line speaker="$actor" line="[11,12,1005].random" hidechoices="false"/>
          </do_if>
          <do_else>
            <add_npc_line speaker="$actor" line="[11,12,1006].random" hidechoices="false"/>
          </do_else>
          <cancel_conversation actor="$actor"/>
          <start_conversation actor="event.param2" conversation="default"/>
        </do_elseif>
      </actions>
    </library>
    <library name="Comm_Common_Subordinates" instantiate="true">
      <!-- common Handler for all NPC Types (Hired) - general Options for Subordinate Managment -->
      <params>
        <param name="actor"/>
      </params>
      <conditions>
        <check_any>
          <event_conversation_next_section sectionprefix="comm_subordinates_" actor="$actor"/>
          <event_conversation_returned_to_section sectionprefix="comm_subordinates_" actor="$actor"/>
          <event_cue_signalled/>
        </check_any>
      </conditions>
      <actions>
        <!--- ################################### -->
        <!-- Subordinate Managment (also assign to superior) -->
        <!--- ################################### -->
        <do_if value="event.param == 'comm_subordinates_main'">
          <add_npc_line speaker="player.entity" line="[1400,1401,1402].random" hidechoices="false" comment="lets talk about this in detail" />
          <add_npc_line speaker="$actor" line="[4110,4111].random" hidechoices="false" comment="Here you go." />
          <add_player_choice text="'Take all my direct Subordinates'" position="1" section="comm_subordinates_take_playersquad" selectable="player.primaryship.subordinates.{1}?"/>
          <add_player_choice text="'Add Subordinate'" position="2" section="comm_subordinates_add_subordinate" selectable="false"/>
          <add_player_choice_sub text="'Take this Ship and all its Subordinates'" position="3" section="comm_subordinates_take_shipsquad" selectable="false" comment="not implemented yet"/>
          <add_player_choice text="'Give your Subordinates to me'" position="4" section="comm_subordinates_transfer_to_playersquad" selectable="false" comment="no practical usage for this yet"/>
          <add_player_choice text="'Select Superior'" position="5" section="comm_subordinates_select_superior" selectable="false"/>
          <add_player_choice_return text="'(Back)'" position="6" />
          <add_player_choice_return text="'(Back)'" position="close" />
        </do_if>
        <do_elseif value="event.param == 'comm_subordinates_take_playersquad'">
          <!-- ToDo: Add Dialogue -->
          <!--add_npc_line speaker="player.entity" line="[1400,1401,1402].random" hidechoices="false" comment="lets talk about this in detail" />
          <add_npc_line speaker="$actor" line="[4110,4111].random" hidechoices="false" comment="Here you go." /-->
          <do_all exact="player.primaryship.subordinates.count" counter="$i" reverse="true">
            <set_value name="player.primaryship.subordinates.{$i}.pilot.$debug" exact="$actor.$debug"/>
            <set_object_commander object="player.primaryship.subordinates.{$i}" commander="$actor.container" type="$actor.type"/>
          </do_all>
          <set_value name="$return"/>
        </do_elseif>
        <do_elseif value="event.param == 'comm_subordinates_transfer_to_playersquad'">
          <!-- ToDo: Add Dialogue -->
          <!--add_npc_line speaker="player.entity" line="[1400,1401,1402].random" hidechoices="false" comment="lets talk about this in detail" />
          <add_npc_line speaker="$actor" line="[4110,4111].random" hidechoices="false" comment="Here you go." /-->
          <do_all exact="$actor.subordinates.count" counter="$i" reverse="true">
            <add_to_player_squad object="$actor.subordinates.{$i}" />
          </do_all>
          <set_value name="$return"/>
        </do_elseif>
        <!-- return to Previous Menu Point (no direct return function in Vanilla - abusing a full menu of Returns for this) -->
        <do_if value="$return?">
          <remove_value name="$return"/>
          <add_player_choice_return text="'Just Ignore this'" position="1" immediate="true"/>
          <add_player_choice_return text="'and select any Item'" position="4" immediate="true"/>
          <add_player_choice_return text="'This is just a Workaround'" position="2" immediate="true"/>
          <add_player_choice_return text="'for a missing Script function'" position="5" immediate="true"/>
          <add_player_choice_return text="'to go back one Menu Level'" position="3" immediate="true"/>
          <add_player_choice_return text="'without selection'" position="6" immediate="true"/>
          <add_player_choice_return text="'(Back)'" position="close" immediate="true"/>
        </do_if>
      </actions>
    </library>
    <library name="Comm_Common_Orders" instantiate="true">
      <!-- common Handler for all NPC Types (Hired) - General Options to connect to other People -->
      <params>
        <param name="actor"/>
      </params>
      <conditions>
        <check_any>
          <event_conversation_next_section sectionprefix="comm_orders_" actor="$actor"/>
          <event_conversation_returned_to_section sectionprefix="comm_orders_" actor="$actor"/>
          <event_cue_signalled/>
        </check_any>
      </conditions>
      <actions>
        <debug_text filter="general" chance="$actor.$debug * 100" text="'%1 %2 %3:\nevent.param= %4 event.param2= %5 event.param3= %6'.[player.age,$actor.name,event.name,event.param,event.param2,event.param3]"/>
        <do_if value="event.param == 'comm_orders_main'">
          <do_if value="event.name == 'event_conversation_next_section'">
            <add_npc_line speaker="player.entity" line="[1400,1401,1402].random" hidechoices="false" comment="lets talk about this in detail" />
            <add_npc_line speaker="$actor" line="[4110,4111].random" hidechoices="false" comment="Here you go." />
          </do_if>
          <set_value name="$slot" exact="1"/>
          <set_value name="$order_number" exact="1"/>
          <!-- Show next up to 6 Orders in Current menu if they have a $order.$displayname and make them removeable or changeable if they are $order.$interruptable -->
          <do_while value="$slot le 6 and $order_number le $actor.$orderlist.count">
            <set_value name="$order" exact="$actor.$orderlist.{$order_number}"/>
            <do_if value="$order.$displayname?">
              <add_player_choice_sub text="$order.$displayname" position="$slot" section="comm_orders_modify" choiceparam="[$slot , $order , $order_number]" selectable="@$order.$interruptable"/>
              <set_value name="$slot" operation="add"/>
            </do_if>
            <set_value name="$order_number" operation="add"/>
          </do_while>
          <do_if value="$slot le 6">
            <add_player_choice_sub text="'\033YNew Order...\033X'" position="$slot" section="comm_orders_new" comment="see Entity-Specific main Script"/>
          </do_if>
          <show_help position="8" custom="'Orders not Displayed: %1\n(%2 because of missing Name)'.[$slot -1 - $actor.$orderlist.count,$order_number - $slot]" duration="10s" log="false"/>
          <add_player_choice_return text="'(Back)'" position="6" />
          <add_player_choice_return text="'(Back)'" position="close" />
        </do_if>
        <do_elseif value="event.param == 'comm_orders_modify'">
          <do_if value="event.param2.{1} == 1" comment="current/first Order">
            <add_player_choice text="'Replace Order - WiP, use Insert+Cancel for now'" position="1" section="comm_orders_replace" choiceparam="event.param2" selectable="false" comment="not implemented yet"/>
            <add_player_choice text="'Insert Order, finish current later'" position="2" section="comm_orders_insert" choiceparam="event.param2" selectable="false" comment="not implemented yet"/>
            <add_player_choice text="'Move Order, finish it later'" position="3" section="comm_orders_move" choiceparam="event.param2" selectable="false" comment="not implemented yet"/>
            <add_player_choice text="'Cancel ALL Orders'" position="4" section="comm_orders_cancel_all" choiceparam="true" comment="choiceparam true tells com_orders_cancel_all to cancel all orders including the first"/>
            <add_player_choice text="'Cancel Order, continue with next'" position="5" section="comm_orders_cancel" choiceparam="event.param2"/>
          </do_if>
          <do_else>
            <add_player_choice text="'Replace Order'" position="1" section="comm_orders_replace" choiceparam="event.param2"/>
            <add_player_choice text="'Insert Order'" position="2" section="comm_orders_insert" choiceparam="event.param2"/>
            <add_player_choice text="'Move Order'" position="3" section="comm_orders_move" choiceparam="event.param2"/>
            <add_player_choice text="'Cancel All Orders except Number 1'" position="4" section="comm_orders_cancel_all" choiceparam="false" comment="choiceparam false tells com_orders_cancel_all not the first order"/>
            <add_player_choice text="'Cancel Order'" position="5" section="comm_orders_cancel" choiceparam="event.param2"/>
          </do_else>
          <add_player_choice_return text="'(Back) - better get used to [Esc] though'" position="6" />
          <add_player_choice_return text="'(Back)'" position="close" />
        </do_elseif>
        <do_elseif value="event.param == 'comm_orders_move'">
          <do_if value="$selected_order_A?">
            <set_value name="$selected_order_B" exact="event.param2"/>
            <do_if value="not ( $selected_order_A.{3} == $selected_order_B.{3} and $selected_order_A.{2} == $selected_order_B.{2})" comment="only do something if the player selected diffrent Orders">
              <!-- make sure the Orders selected are still the same [$slot , $order , $order_number]-->
              <do_if value="$actor.$orderlist.{$selected_order_A.{3}} == $selected_order_A.{2}" comment="do nothing - Order still has the same position" />
              <do_elseif value="$actor.$orderlist.indexof.{$selected_order_A.{2}} lt $selected_order_A.{3}" comment="Order has moved down - determine new position and set it">
                <set_value name="$selected_order_A.{3}" exact="$actor.$orderlist.indexof.{$selected_order_A.{2}}"/>
              </do_elseif>
              <do_else comment="Escape - Order is not in list anymore">
                <set_value name="$escape" exact="true"/>
              </do_else>
              <do_if value="$actor.$orderlist.{$selected_order_B.{3}} == $selected_order_B.{2}" comment="do nothing - Order still has the same position" />
              <do_elseif value="$actor.$orderlist.indexof.{$selected_order_B.{2}} lt $selected_order_B.{3}" comment="Order has moved down - determine new position and set it">
                <set_value name="$selected_order_B.{3}" exact="$actor.$orderlist.indexof.{$selected_order_B.{2}}"/>
              </do_elseif>
              <do_else comment="Escape - Order is not in list anymore">
                <set_value name="$escape" exact="true"/>
              </do_else>
              <do_if value="not $escape?">
                <!-- swap both Orders -->
                <set_value name="$actor.$orderlist.{$selected_order_B.{3}}" exact="$selected_order_A.{2}"/>
                <set_value name="$actor.$orderlist.{$selected_order_A.{3}}" exact="$selected_order_B.{2}"/>
              </do_if>
              <do_else>
                <remove_value name="$escape"/>
              </do_else>
            </do_if>
            <remove_value name="$selected_order_A"/>
            <remove_value name="$selected_order_B"/>
            <set_value name="$return"/>
          </do_if>
          <do_else>
            <set_value name="$selected_order_A" exact="event.param2"/>
            <!-- Select a second order to swap with this one -->
            <set_value name="$slot" exact="1"/>
            <set_value name="$order_number" exact="1"/>
            <!-- Show Orders Menu again to select a second Order and for moving (they will be swapped) -->
            <do_while value="$slot le 6 and $order_number le $actor.$orderlist.count">
              <set_value name="$order" exact="$actor.$orderlist.{$order_number}"/>
              <do_if value="$order.$displayname?">
                <do_if value="$order_number == 1">
                  <!-- first Order is never selectable because i dont want to handle the interrupt stuff yet. -->
                  <add_player_choice text="$order.$displayname" position="$slot" section="comm_orders_move" choiceparam="[$slot , $order , $order_number]" selectable="false"/>
                </do_if>
                <do_if value="$order != $selected_order_A">
                  <add_player_choice text="$order.$displayname" position="$slot" section="comm_orders_move" choiceparam="[$slot , $order , $order_number]" selectable="@$order.$interruptable"/>
                </do_if>
                <do_else>
                  <!-- This is the Order already selected - its not selectable, but highlighted in Blue to make clear its the already selected one -->
                  <add_player_choice text="'\033B%1\033X'.[$order.$displayname]" position="$slot" section="comm_orders_move" choiceparam="[$slot , $order , $order_number]" selectable="false"/>
                </do_else>
                <set_value name="$slot" operation="add"/>
              </do_if>
              <set_value name="$order_number" operation="add"/>
            </do_while>
          </do_else>
        </do_elseif>
        <do_elseif value="event.param == 'comm_orders_cancel'">
          <!-- Order is at same Position as when we entered the Menu - we can safely cancel it if its still interruptable -->
          <do_if value="$actor.$orderlist.{event.param2.{3}} == event.param2.{2}">
            <do_if value="$actor.$orderlist.{event.param2.{3}}.$interruptable">
              <remove_value name="$actor.$orderlist.{event.param2.{3}}"/>
              <debug_text filter="general" chance="$actor.$debug * 100" text="'%1 %2 %3:\n Removed Order %4 from Orderlist'.[player.age,$actor.name,$actor.event.param2.{2}.$displayname]"/>
            </do_if>
            <do_else>
              <debug_text filter="general" chance="$actor.$debug * 100" text="'%1 %2 %3:\n Trying to remove Order %4 from Orderlist, but its not interruptable anymore'.[player.age,$actor.name,$actor.$orderlist.{event.param2.{3}}.$displayname]"/>
            </do_else>
          </do_if>
          <!-- Order is at a lower Position as when we entered the Menu - We can probably remove it if its still interruptable -->
          <do_elseif value="$actor.$orderlist.indexof.{event.param2.{2}} lt event.param2.{3}">
            <do_if value="event.param2.{3}.$interruptable">
              <remove_value name="$actor.$orderlist.{$actor.$orderlist.indexof.{event.param2.{2}}}"/>
              <debug_text filter="general" chance="$actor.$debug * 100" text="'%1 %2 %3:\n Removed Order %4 from Orderlist, although it is now at a lower Position'.[player.age,$actor.$orderlist.event.param2.{3}.$displayname]"/>
            </do_if>
            <do_else>
              <debug_text filter="general" chance="$actor.$debug * 100" text="'%1 %2 %3:\n Trying to remove Order %4 from Orderlist, but its not interruptable anymore and on a lower position'.[player.age,$actor.name,$actor.$orderlist.event.param2.{3}.$displayname]"/>
            </do_else>
          </do_elseif>
          <set_value name="$return"/>
        </do_elseif>
        <do_elseif value="event.param == 'comm_orders_cancel_all'">
          <do_all exact="$actor.$orderlist.count" counter="$i" reverse="true">
            <do_if value="@$actor.$orderlist.{$i}.$interruptable and ( not $i == 1 or event.param2 )" comment="event.param2 == true says that we shall also cancel the first order (see comm_orders_modify)">
              <remove_value name="$actor.$orderlist.{$i}"/>
            </do_if>
          </do_all>
          <set_value name="$return"/>
        </do_elseif>
        <!--re-useable Object Selection Stuff - maybe add this to an own Cue because it may be used anywhere? -->
        <do_elseif value="event.param == 'comm_orders_select_playerobject'">
          <open_conversation_menu menu="MapMenu" param="[0, 0, 'sector', $actor.container.sector, [player.galaxy,$actor.container.cluster,$actor.container.sector], $actor.container.zone, 'selectplayerobject', [event.param2, null, false, false, true, false, false, false, false, false, false, true, false, false, false, false]]" param2="event.param3" />
          <add_conversation_view view="closeupdetailmonitor" />
        </do_elseif>
        <do_elseif value="event.param == 'comm_orders_select_zone'">
          <open_conversation_menu menu="MapMenu" param="[0, 0, 'sector', $actor.container.sector, null, $actor.container.zone, 'selectzone', [event.param2]]"/>
          <add_conversation_view view="closeupdetailmonitor" />
        </do_elseif>
        <do_elseif value="event.param == 'comm_orders_select_sector'">
          <open_conversation_menu menu="UTMapMenu" param="[0, 0, 'cluster', $actor.container.cluster, null, $actor.container.sector, 'selectsector', [event.param2]]"/>
          <add_conversation_view view="closeupdetailmonitor" />
        </do_elseif>
        <do_elseif value="event.param == 'comm_orders_select_cluster'">
          <open_conversation_menu menu="UTMapMenu" param="[0, 0, 'galaxy', player.galaxy, null, $actor.container.cluster, 'selectcluster', [event.param2]]"/>
          <add_conversation_view view="closeupdetailmonitor" />
        </do_elseif>
        <do_elseif value="event.param == 'comm_orders_select_space'">
          <open_conversation_menu menu="UTMapMenu" param="[0, 0, 'cluster', $actor.container.cluster, null, $actor.container.sector, 'selectspace', [event.param2]]"/>
          <add_conversation_view view="closeupdetailmonitor" />
        </do_elseif>
        <do_elseif value="event.param == 'comm_orders_select_object'">
          <open_conversation_menu menu="MapMenu" param="[0, 0, 'sector', $actor.container.sector, [player.galaxy,$actor.container.cluster,$actor.container.sector], $actor.container.zone, 'selectobject', [event.param2]]"/>
          <add_conversation_view view="closeupdetailmonitor" />
        </do_elseif>
        
        <!-- return to Previous Menu Point (no direct return function in Vanilla - abusing a full menu of Returns for this) -->
        <do_if value="$return?">
          <remove_value name="$return"/>
          <add_player_choice_return text="'Just Ignore this'" position="1" immediate="true"/>
          <add_player_choice_return text="'and select any Item'" position="4" immediate="true"/>
          <add_player_choice_return text="'This is just a Workaround'" position="2" immediate="true"/>
          <add_player_choice_return text="'for a missing Script function'" position="5" immediate="true"/>
          <add_player_choice_return text="'to go back one Menu Level'" position="3" immediate="true"/>
          <add_player_choice_return text="'without selection'" position="6" immediate="true"/>
          <add_player_choice_return text="'(Back)'" position="close" immediate="true"/>
        </do_if>
      </actions>
    </library>
    
    <library name="Comm_Common_Misc" instantiate="true">
      <!-- common Handler for all NPC Types (Hired) - Goodbye Section and Debug Options -->
      <params>
        <param name="actor"/>
      </params>
      <conditions>
        <check_any>
          <event_conversation_returned_to_section section="comm_goodbye" actor="$actor"/>
          <event_conversation_next_section sectionprefix="comm_debug_" actor="$actor"/>
          <event_conversation_returned_to_section sectionprefix="comm_debug_" actor="$actor"/>
          <event_cue_signalled/>
        </check_any>
      </conditions>
      <actions>
        <!--- ################################### -->
        <!--                            Goodbye                              -->
        <!--- ################################### -->
        <do_if value="event.param == 'comm_goodbye'">
          <add_npc_line speaker="player.entity" line="[1102,1103].random" hidechoices="false" comment="Goodbye. | See ya." />
          <do_if value="$actor.room != player.entity.room" >
            <add_npc_line speaker="$actor" line="[11,12,15,1005].random" hidechoices="false" comment="Good luck out there! | Goodbye! | Glad to be of service.|Closing Comms." />
          </do_if>
          <do_else>
            <add_npc_line speaker="$actor" line="[11,12,15,1006].random" hidechoices="false" comment="Good luck out there! | Goodbye! | Glad to be of service.|Goodbye, Sir." />
          </do_else>
        </do_if>
        <!--- ################################### -->
        <!--                              Debug                                -->
        <!--- ################################### -->
        <do_elseif value="event.param == 'comm_debug_main'">
          <add_player_choice text="'Restart Main Script'" position="1" section="comm_debug_script_restart"/>
          <add_player_choice text="'Print Script Values to Debuglog'" position="2" section="comm_debug_print_vars"/>
          <add_player_choice text="'Toggle Debugging to Log: '+ $actor.$debug" position="3" section="comm_debug_toggle"/>
          <add_player_choice text="'Destroy Object for complete cleanup \033R(USE WITH CARE)\033X'" position="4" section="comm_debug_cleanup_object"/>
          <add_player_choice text="'Destroy Actor for cleanup'" position="5" section="comm_debug_cleanup_actor"/>
          <add_player_choice text="'Max out Skills'" position="6" section="comm_debug_fivestars"/>
          <add_player_choice_return text="'(Back)'" position="close" />
        </do_elseif>
        <do_elseif value="event.param == 'comm_debug_script_restart'">
          <remove_value name="$actor.$ut_cac_settings"/>
          <include_actions ref="md.UT_CAC_Lib.Actor_Init" comment="Reset to default Settings"/>
          <do_if value="$actor.type == entitytype.manager">
            <remove_value name="$actor.$orderlist"/>
            <start_script object="$actor" name="'ut.cac.base.manager'"/>
          </do_if>
          <do_elseif value="$actor.type == entitytype.pilot">
            <remove_value name="$actor.$orderlist"/>
            <start_script object="$actor" name="'ut.cac.base.captain'"/>
          </do_elseif>
          <do_elseif value="$actor.type == entitytype.commander">
            <remove_value name="$actor.$orderlist"/>
            <start_script object="$actor" name="'ut.cac.base.captain'"/>
          </do_elseif>
          <do_elseif value="$actor.type == entitytype.manager">
            <start_script object="$actor" name="'ut.cac.base.manager'"/>
          </do_elseif>
          <do_else>
            <show_notification caption="'ERROR'" details="'Entitytype not supported\n%1'.[$actor.entitytype]"/>
            <debug_text filter="error" text="'Entitytype not supported for Script restart: %1'.[$actor.entitytype]"/>
          </do_else>
        </do_elseif>
        <do_elseif value="event.param == 'comm_debug_print_vars'">
          <signal_objects object="$actor" param="'print script vars to logfile'"/>
        </do_elseif>
        <do_elseif value="event.param == 'comm_debug_toggle'">
          <set_value name="$actor.$debug" exact="not $actor.$debug"/>
        </do_elseif>
        <do_elseif value="event.param == 'comm_debug_cleanup_object'">
          <disconnect_from_build_location object="$actor.container.buildingmodule.container"/>
          <destroy_object object="$actor.container" explosion="false"/>
        </do_elseif>
        <do_elseif value="event.param == 'comm_debug_cleanup_actor'">
          <destroy_object object="$actor" explosion="false"/>
        </do_elseif>
        <do_elseif value="event.param == 'comm_debug_fivestars'">
          <set_skill entity="$actor" type="skilltype.boarding" exact="5"/>
          <set_skill entity="$actor" type="skilltype.combat" exact="5"/>
          <set_skill entity="$actor" type="skilltype.engineering" exact="5"/>
          <set_skill entity="$actor" type="skilltype.leadership" exact="5"/>
          <set_skill entity="$actor" type="skilltype.management" exact="5"/>
          <set_skill entity="$actor" type="skilltype.morale" exact="5"/>
          <set_skill entity="$actor" type="skilltype.navigation" exact="5"/>
          <set_skill entity="$actor" type="skilltype.science" exact="5"/>
        </do_elseif>

      </actions>
    </library>
  </cues>
</mdscript>
