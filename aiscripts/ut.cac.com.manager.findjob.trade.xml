<?xml version="1.0" encoding="UTF-8"?>
<aiscript xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="ut.cac.com.manager.findjob.trade" xsi:noNamespaceSchemaLocation="http://utnas/~unitrader/XRebirthxsds/aiscripts.xsd" version="1">
  <params>
    <param name="params" default="false" comment="pass a single Table filled with the wanted param Values here to make calls via list possible (always has priority)"/>
    <param name="entity" default="false" comment="Entity who needs (Trade)Orders (NOT as Ship)"/>
  </params>
  <interrupts>
    <handler comment="Print Script Vars">
      <conditions>
        <event_object_signalled object="this" param="'print script vars to logfile'"/>
      </conditions>
      <actions>
        <debug_text filter="general" text="'\nManager Name ' + this.knownname + ' at Time ' + player.age + ' Script Values:\n
$miningship= ' + $miningship + '\n
$wareslist = ' + $wareslist + '\n
$wareslist_prio = ' + $wareslist_prio + '\n
$wareslist_buysell = ' + $wareslist_buysell + '\n
$mininglist (@) = ' + @$mininglist + '\n
$entity  = ' + $entity"/>
      </actions>
    </handler>
  </interrupts>
  <init>

  </init>
  <attention min="unknown">
    <actions>
      <do_if value="$params">
        <do_if value="$params.$entity?">
          <set_value name="$entity" exact="$params.$entity"/>
        </do_if>
        <do_if value="$params.$repeat?">
          <set_value name="$repeat" exact="$params.$repeat"/>
        </do_if>
        <do_else>
          <set_value name="$repeat" exact="false"/>
        </do_else>
      </do_if>
      <remove_value name="$params"/>
      <do_if value="not $entity.exists">
        <debug_text filter="error" text="'%1 %2 %3 No Entity passed to give Trade Orders to - aborting'.[player.age,this.name,this.container.name]"/>
        <return/>
      </do_if>
      
      <set_command_action commandaction="commandaction.searchingtrades"/>
      <wait exact="1s"/>
      
      <!-- Check if the Ship is a mining Ship and if yes -> when a mineable Ressource either has a ratio of 0.0 or is encountered on the offer List send it mining instead of shopping -->
      <!-- =============================== -->
      <!-- check wheter the Ship is a mining Ship - Assume that Miningships with gascollectors have a liquid cargobay and Ships with miningturret and orecollectors have a bulk cargobay -->
      <set_value name="$miningship" exact="false"/>
      <do_if value="$entity.ship.primarypurpose ==objectpurpose.mine and $entity.ship.units.{unitcategory.gascollector}.count gt 0">
        <set_value name="$miningship" exact="true"/>
      </do_if>
      <do_else>
        <find_object_component name="$miningturret" object="$entity.ship" macro="macro.turret_medium_ml_macro"/>
        <do_if value="$miningturret.exists and $entity.ship.units.{unitcategory.orecollector}.count gt 0">
          <set_value name="$miningship" exact="true"/>
        </do_if>
      </do_else>
      <debug_text filter="general" chance="this.$debug * 100" text="'%1 %2 %3 Finding Trade order for: %4 on %5'.[player.age,this.name,this.container.name,$entity.name,$entity.container.name]"/>
      
      <!-- to suppress unnecesary debug output (dont want to remove it completely yet, but its too verbose) -->
      <set_value name="$debug_detailoutput" exact="0" comment="this.$debug * 100" />
      
      <!-- get List of Wares traded by Station and order them by Wanted Amount Ratio - their priority (inverse value for selled Wares -->
      <create_list name="$wareslist"/>
      <create_list name="$wareslist_prio"/>
      <create_list name="$wareslist_buysell"/>
      <!-- first add the Ressources of the Station to the List of considered Wares -->
      <do_all exact="this.container.resources.list.count" counter="$i">
        <set_value name="$ware" exact="this.container.resources.list.{$i}"/>
        <!-- not interested in Wares which the Ship cannt transport -->
        <do_if value="$entity.ship.cargo.{$ware}.free le 0">
          <debug_text filter="general" chance="$debug_detailoutput" text="'%1 Ship has no space for it'.[$ware]"/>
          <continue/>
        </do_if>
        <!-- legality filter - wheter the ware is added to the List depends on the Settings of the Manager -->
        <do_if value="this.$legality == 0 and not $ware.illegalto.{this.zone.policefaction}.{this.owner}" comment="trades with everything - wheter legal or illegal">
          <debug_text filter="general" chance="$debug_detailoutput" text="'%1 legal, illegal shitegal'.[$ware]"/>
          <continue/>
        </do_if>
        <do_if value="this.$legality == 1 and $ware.illegalto.{this.zone.policefaction}.{this.owner}" comment="no goods which are considered illegal in this Zone taking licenses into account">
          <debug_text filter="general" chance="$debug_detailoutput" text="'%1 is licensed'.[$ware]"/>
          <continue/>
        </do_if>
        <do_if value="this.$legality == 2 and $ware.illegalto.{this.zone.policefaction}.{null}" comment="no goods which are considered illegal in this Zone">
          <debug_text filter="general" chance="$debug_detailoutput" text="'%1 is illegal but has license'.[$ware]"/>
          <continue/>
        </do_if>
        <do_if value="this.$legality == 3 and $ware.illegal" comment="no goods which are considered illegal anywhere">
          <debug_text filter="general" chance="$debug_detailoutput" text="'%1 is illegal'.[$ware]"/>
          <continue/>
        </do_if>
        <do_if value="not $ware.illegal" comment="legal goods">
          <debug_text filter="general" chance="$debug_detailoutput" text="'%1 is legal'.[$ware]"/>
        </do_if>
        <debug_text filter="general" chance="$debug_detailoutput" text="'buying it'"/>
        <get_ware_reservation ware="$ware" object="this.container" result="$incomingamount"/>
        <set_value name="$prio" exact="1 - ( ( this.container.cargo.{$ware}.count + $incomingamount )f  / ( this.container.cargo.{$ware}.target )f )"/>
        <debug_text filter="general" chance="$debug_detailoutput" text="'Prio for Ware is: ' + $prio"/>
        <!-- no need to include the Wares where we have the desired amount -->
        <do_if value="$prio gt 0.0">
          <!-- prio 1.0, so always in the beginning (higher prios are possible for products, see the respective part) -->
          <do_if value="$prio == 1f">
            <debug_text filter="general" chance="$debug_detailoutput" text="'Adding it to the beginning of the List'"/>
            <set_value name="$wareslist.{1}" exact="$ware" operation="insert"/>
            <set_value name="$wareslist_prio.{1}" exact="$prio" operation="insert"/>
            <set_value name="$wareslist_buysell.{1}" exact="'buy'" operation="insert"/>
            <do_if value="$ware.tags.indexof.{tag.minable} and $miningship">
              <set_value name="$miningpriority"/>
            </do_if>
          </do_if>
          <!-- first Value in the Target List, no need for any Sorting-->
          <do_elseif value="$wareslist.count == 0">
            <debug_text filter="general" chance="$debug_detailoutput" text="'Starting the List with it'"/>
            <set_value name="$wareslist.{1}" exact="$ware" operation="insert"/>
            <set_value name="$wareslist_prio.{1}" exact="$prio" operation="insert"/>
            <set_value name="$wareslist_buysell.{1}" exact="'buy'" operation="insert"/>
          </do_elseif>
          <do_else>
            <set_value name="$inserted" exact="false"/>
            <do_all exact="$wareslist_prio.count" counter="$j" reverse="true">
              <do_if value="$wareslist_prio.{$j} ge $prio">
                <debug_text filter="general" chance="$debug_detailoutput" text="'Inserting it into the List At Position ' + $j"/>
                <set_value name="$wareslist.{$j+1}" exact="$ware" operation="insert"/>
                <set_value name="$wareslist_prio.{$j+1}" exact="$prio" operation="insert"/>
                <set_value name="$wareslist_buysell.{$j + 1}" exact="'buy'" operation="insert"/>
                <set_value name="$inserted" exact="true"/>
                <break/>
              </do_if>
            </do_all>
            <do_if value="not $inserted">
              <debug_text filter="general" chance="$debug_detailoutput" text="'Inserting it into the List As first item'"/>
              <set_value name="$wareslist.{1}" exact="$ware" operation="insert"/>
              <set_value name="$wareslist_prio.{1}" exact="$prio" operation="insert"/>
              <set_value name="$wareslist_buysell.{1}" exact="'buy'" operation="insert"/>
            </do_if>
          </do_else>
        </do_if>
      </do_all>
      
      <!-- If it is a Miningship filter needed Wares for Mineables and save it to another List (doing it now prevents iterating through a longer Ware List)-->
      <do_if value="$miningship">
        <set_value name="$mininglist" exact="$wareslist.clone"/>
        <do_all exact="$mininglist.count" counter="$i" reverse="true">
          <do_if value="not $mininglist.{$i}.tags.indexof.{tag.minable}">
            <remove_value name="$mininglist.{$i}"/>
          </do_if>
        </do_all>
        <debug_text filter="general" chance="this.$debug * 100" text="'Sorted Ware List to Mine: \n%1'.[$mininglist]"/>
      </do_if>
      
      <!-- if it is a mining Ship and Mining is very important right now send it directly to mining, no need to search for other stuff yet -->
      <do_if value="$miningpriority?">
        <debug_text filter="general" chance="this.$debug * 100" text="'Sending Ship to mine %1 (Priority Case)'.[$mininglist]"/>
        <run_script name="'ut.cac.com.manager.findjob.mine'">
          <param name="entity" value="$entity"/>
          <param name="mininglist" value="$mininglist"/>
        </run_script>
        <return/>
      </do_if>
      
      <!-- now add Produced Wares to the List considered for Trading-->
      <!-- ToDo: Make this conditional for when the Manager is expierienced enough -->
      <do_all exact="this.container.products.list.count" counter="$i">
        <set_value name="$ware" exact="this.container.products.list.{$i}"/>
        <!-- not interested in Wares which the Ship cannt transport -->
        <do_if value="$entity.ship.cargo.{$ware}.free le 0">
          <debug_text filter="general" chance="$debug_detailoutput" text="'%1 Ship has no space for it'.[$ware]"/>
          <continue/>
        </do_if>
        <!-- legality filter - wheter the ware is added to the List depends on the Settings of the Manager -->
        <do_if value="this.$legality == 0 and not $ware.illegalto.{this.zone.policefaction}.{this.owner}" comment="trades with everything - wheter legal or illegal">
          <debug_text filter="general" chance="$debug_detailoutput" text="'%1 legal, illegal shitegal'.[$ware]"/>
          <continue/>
        </do_if>
        <do_if value="this.$legality == 1 and $ware.illegalto.{this.zone.policefaction}.{this.owner}" comment="no goods which are considered illegal in this Zone taking licenses into account">
          <debug_text filter="general" chance="$debug_detailoutput" text="'%1 is licensed'.[$ware]"/>
          <continue/>
        </do_if>
        <do_if value="this.$legality == 2 and $ware.illegalto.{this.zone.policefaction}.{null}" comment="no goods which are considered illegal in this Zone">
          <debug_text filter="general" chance="$debug_detailoutput" text="'%1 is illegal but has license'.[$ware]"/>
          <continue/>
        </do_if>
        <do_if value="this.$legality == 3 and $ware.illegal" comment="no goods which are considered illegal anywhere">
          <debug_text filter="general" chance="$debug_detailoutput" text="'%1 is illegal'.[$ware]"/>
          <continue/>
        </do_if>
        <do_if value="not $ware.illegal" comment="legal goods">
          <debug_text filter="general" chance="$debug_detailoutput" text="'%1 is legal'.[$ware]"/>
        </do_if>
        <debug_text filter="general" chance="$debug_detailoutput" text="'buying it'"/>
        <get_ware_reservation ware="$ware" object="this.container" result="$reservedamount"/>
        <set_value name="$prio" exact="( this.container.cargo.{$ware}.count - $reservedamount )f / ( this.container.cargo.{$ware}.target )f"/>
        <!-- modify prio value (-1.0, but not negative) in case of intermediate ware (should only be sold over the target value ) -->
        <do_if value="this.container.products.{$ware}.intermediate">
          <set_value name="$prio" exact="[0.0,$prio-1.0].max"/>
        </do_if>
        <!-- no need to include the Wares we dont have in cargo -->
        <do_if value="$prio gt 0.0">
          <!-- first Value in the Target List, no need for any Sorting-->
          <do_if value="$wareslist.count == 0">
            <set_value name="$wareslist.{1}" exact="$ware" operation="insert"/>
            <set_value name="$wareslist_prio.{1}" exact="$prio" operation="insert"/>
            <set_value name="$wareslist_buysell.{1}" exact="'sell'" operation="insert"/>
          </do_if>
          <do_else>
            <do_all exact="$wareslist_prio.count" counter="$j" reverse="true">
              <do_if value="$wareslist_prio.{$j} ge $prio">
                <set_value name="$wareslist.{$j+1}" exact="$ware" operation="insert"/>
                <set_value name="$wareslist_prio.{$j+1}" exact="$prio" operation="insert"/>
                <set_value name="$wareslist_buysell.{$j+1}" exact="'sell'" operation="insert"/>
                <break/>
              </do_if>
            </do_all>
          </do_else>
        </do_if>
      </do_all>
      
      <debug_text filter="general" chance="this.$debug * 100" text="'Sorted Ware List to grab: \n%1\n%2\n%3'.[$wareslist,$wareslist_prio,$wareslist_buysell]"/>
      <!-- we dont need these Values anymore -->
      <remove_value name="$incomingamount"/>
      <remove_value name="$ware"/>
      <remove_value name="$prio"/>
      <remove_value name="$wareslist_prio"/>
      
      <!-- ================================ -->
      <!-- find possible Trades in order of priority -->
      <!-- ToDo: add Selling Products ($warelist already contains them, but they are not yet sold )-->
      <do_all exact="$wareslist.count" counter="$i" reverse="false">
        <wait exact="5s" comment="to make it look like he is actually comparing Trades wait 5 seconds per Ware checked"/>
        <set_value name="$ware" exact="$wareslist.{$i}"/>
        <!-- Aquire Products -->
        <do_if value="$wareslist_buysell.{$i} == 'buy'">
          <!-- If we encounter a mineable Ware and the Ship is considered a Miner send it mining for all Minerals needed -->
          <do_if value="$ware.tags.indexof.{tag.minable} and $miningship">
            <debug_text filter="general" chance="this.$debug * 100" text="'Sending Ship to mine %1'.[$mininglist]"/>
            <run_script name="'ut.cac.com.manager.findjob.mine'">
              <param name="entity" value="$entity"/>
              <param name="mininglist" value="$mininglist"/>
            </run_script>
            <return/>
          </do_if>
          <find_sell_offer result="$selloffer" tradepartner="this.container" wares="$ware" space="this.sector">
            <offeramount min="this.container.cargo.{$ware}.target / 10"/>
          </find_sell_offer>
          <do_if value="not $selloffer.available " comment="and $entity.ship.hasjumpdrive  //// ToDo: Cluster Range only with Jumpdrive and Radar set up">
            <find_sell_offer result="$selloffer" tradepartner="this.container" wares="$ware" space="this.cluster">
              <offeramount min="this.container.cargo.{$ware}.target / 10"/>
            </find_sell_offer>
          </do_if>
          <do_if value="$selloffer.available">
            <debug_text filter="general" chance="this.$debug * 100" text="'found sell offer: %1 ( %2 %3 %4 %5 )'.[$selloffer,$selloffer.owner.knownname,$selloffer.owner.zone.knownname,$selloffer.ware,$selloffer.amount]"/>
            <!--find_buy_offer buyer="this.container" wares="$ware" result="$buyoffer" />
                <do_if value="not $buyoffer.available"-->
            <!-- create a temp buyoffer so we can add an Trade Order to the Ship -->
            <set_value name="$amount" exact="[ $selloffer.amount, this.container.cargo.{$ware}.target - this.container.cargo.{$ware}.count, $entity.ship.cargo.{$ware}.free,(this.money/$selloffer.unitprice)i ].min"/>
            <!--set_value name="$created_buyoffer"/>
                <debug_text filter="general" text="'Station %1 has no fitting buy offer - creating one to be able to sell the necesary ware ( %2x %3 ).'.[this.container.name,$amount,$ware]" />
                </do_if>
                <do_else>
                <set_value name="$amount" exact="[ $selloffer.amount, this.container.cargo.{$ware}.target - this.container.cargo.{$ware}.count, $entity.ship.cargo.{$ware}.free,(this.money/$selloffer.unitprice)i , $buyoffer.amount].min"/>
                </do_else-->
            <do_if value="$amount == 0">
              <debug_text filter="general" chance="this.$debug * 100" text="'possible amount is 0 - continuing with next ware'"/>
              <continue/>
            </do_if>
            <create_trade_offer name="$buyoffer" buyer="this.container" object="this.container" amount="$amount" ware="$ware" price="$selloffer.unitprice" playeronly="true"/>
            <debug_text filter="general" chance="this.$debug * 100" text="'trade amount: %1\n=&gt; %2 offer, %3 ( %4 - %5 ) needed(target-is), %6 cargobay, %7 ( %8 / %9 ) money(available/unitprice)'.[ $amount , $selloffer.amount , this.container.cargo.{$ware}.target - this.container.cargo.{$ware}.count , this.container.cargo.{$ware}.target , this.container.cargo.{$ware}.count , $entity.ship.cargo.{$ware}.free , (this.money/$selloffer.unitprice)i , this.money , $selloffer.unitprice ]"/>
            <!--clamp_trade_amount result="$amount" seller="this.container" seller="$entity.ship" trade="$buyoffer" amount="$amount"/-->
            <do_if value="not $entity.hasownaccount">
              <set_actor_account actor="$entity"/>
            </do_if>
            <debug_text filter="general" chance="this.$debug * 100" text="'transfering %1 Credits from manager ( %2 Cr ) to trader ( %3 Cr ) for a total of %4 Cr'.[($amount * $selloffer.unitprice - $entity.money)/100,(this.money)/100,($entity.money)/100,($amount * $selloffer.unitprice)/100]"/>
            <transfer_money from="this" to="$entity" amount="$amount * $selloffer.unitprice - $entity.money"/>
            <add_buy_order object="$entity.ship" trade="$selloffer" amount="$amount" price="$selloffer.unitprice"/>
            <add_sell_order object="$entity.ship" trade="$buyoffer" amount="$amount" price="$selloffer.unitprice"/>
            <remove_trade_offer object="this.container" tradeoffer="$buyoffer"/>
            <!-- tell the Ship to get the Wares and bring them back ( ^= 2 single trade runs ) -->
            <signal_objects object="$entity.ship" param="'new order'" param2="[ table[$script='ut.cac.com.captain.performsingletraderun',$repeat=0] , table[$script='ut.cac.com.captain.performsingletraderun',$repeat=0,$undock=0] , table[$script='ut.cac.com.captain.refuel',$repeat=0] ]"/>
            <break/>
          </do_if>
        </do_if>
        <do_elseif value="$wareslist_buysell.{$i} == 'sell'">
          <find_buy_offer result="$buyoffer" tradepartner="this.container" wares="$ware" space="this.sector">
            <offeramount min="this.container.cargo.{$ware}.count / 10"/>
          </find_buy_offer>
          <do_if value="not $buyoffer.available" comment="and $entity.ship.hasjumpdrive  //// ToDo: Cluster Range only with Jumpdrive and Radar set up">
            <find_buy_offer result="$buyoffer" tradepartner="this.container" wares="$ware" space="this.cluster">
              <offeramount min="this.container.cargo.{$ware}.count / 10"/>
            </find_buy_offer>
          </do_if>
          <do_if value="$buyoffer.available">
            <debug_text filter="general" chance="this.$debug * 100" text="'found buy offer: %1 ( %2 %3 %4 %5 )'.[$buyoffer,$buyoffer.owner.knownname,$buyoffer.owner.zone.knownname,$buyoffer.ware,$buyoffer.amount]"/>
            <set_value name="$amount" exact="[ $buyoffer.amount, this.container.cargo.{$ware}.count, $entity.ship.cargo.{$ware}.free ].min"/>
            <do_if value="$amount == 0">
              <debug_text filter="general" chance="this.$debug * 100" text="'possible amount is 0 - continuing with next ware'"/>
              <continue/>
            </do_if>
            <create_trade_offer name="$selloffer" buyer="this.container" object="this.container" amount="$amount" ware="$ware" price="0Cr" playeronly="true"/>
            <debug_text filter="general" chance="this.$debug * 100" text="'trade amount: %1\n=&gt; %2 offer, %3 station amount, %4 cargobay'.[ $amount , $buyoffer.amount , this.container.cargo.{$ware}.count , $entity.ship.cargo.{$ware}.free ]"/>
            <do_if value="not $entity.hasownaccount">
              <set_actor_account actor="$entity"/>
            </do_if>
            <add_buy_order object="$entity.ship" trade="$selloffer" amount="$amount" price="0Cr"/>
            <add_sell_order object="$entity.ship" trade="$buyoffer" amount="$amount" price="$buyoffer.unitprice"/>
            <remove_trade_offer object="this.container" tradeoffer="$selloffer"/>
            <!-- tell the Ship to get the Wares and bring them back ( ^= 2 single trade runs ) -->
            <signal_objects object="$entity.ship" param="'new order'" param2="[ table[$script='ut.cac.com.captain.performsingletraderun'] , table[$script='ut.cac.com.captain.performsingletraderun',$undock=0] , table[$script='ut.cac.com.captain.refuel'] ]"/>
            <!--do_if value="$entity.$orderlist.{1}.$order == 'wait minmax'">
              <signal_objects object="$entity.ship" param="'next order'"/>
            </do_if-->
            <break/>
          </do_if>
        </do_elseif>
      </do_all>
      <return>
        <retval name="repeat" value="false"/>
      </return>
    </actions>
  </attention>
</aiscript>
